// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _doGain_HH_
#define _doGain_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "doGain_CTRL_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CTRL_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CTRL_DATA_WIDTH = 32>
struct doGain : public sc_module {
    // Port declarations 38
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > inStream_TDATA;
    sc_in< sc_logic > inStream_TVALID;
    sc_out< sc_logic > inStream_TREADY;
    sc_in< sc_lv<4> > inStream_TKEEP;
    sc_in< sc_lv<4> > inStream_TSTRB;
    sc_in< sc_lv<2> > inStream_TUSER;
    sc_in< sc_lv<1> > inStream_TLAST;
    sc_in< sc_lv<5> > inStream_TID;
    sc_in< sc_lv<6> > inStream_TDEST;
    sc_out< sc_lv<32> > outStream_TDATA;
    sc_out< sc_logic > outStream_TVALID;
    sc_in< sc_logic > outStream_TREADY;
    sc_out< sc_lv<4> > outStream_TKEEP;
    sc_out< sc_lv<4> > outStream_TSTRB;
    sc_out< sc_lv<2> > outStream_TUSER;
    sc_out< sc_lv<1> > outStream_TLAST;
    sc_out< sc_lv<5> > outStream_TID;
    sc_out< sc_lv<6> > outStream_TDEST;
    sc_in< sc_logic > s_axi_CTRL_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_WVALID;
    sc_out< sc_logic > s_axi_CTRL_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH/8> > s_axi_CTRL_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_RVALID;
    sc_in< sc_logic > s_axi_CTRL_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    doGain(sc_module_name name);
    SC_HAS_PROCESS(doGain);

    ~doGain();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    doGain_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>* doGain_CTRL_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > inStream_V_data_V_0_data_out;
    sc_signal< sc_logic > inStream_V_data_V_0_vld_in;
    sc_signal< sc_logic > inStream_V_data_V_0_vld_out;
    sc_signal< sc_logic > inStream_V_data_V_0_ack_in;
    sc_signal< sc_logic > inStream_V_data_V_0_ack_out;
    sc_signal< sc_lv<32> > inStream_V_data_V_0_payload_A;
    sc_signal< sc_lv<32> > inStream_V_data_V_0_payload_B;
    sc_signal< sc_logic > inStream_V_data_V_0_sel_rd;
    sc_signal< sc_logic > inStream_V_data_V_0_sel_wr;
    sc_signal< sc_logic > inStream_V_data_V_0_sel;
    sc_signal< sc_logic > inStream_V_data_V_0_load_A;
    sc_signal< sc_logic > inStream_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > inStream_V_data_V_0_state;
    sc_signal< sc_logic > inStream_V_data_V_0_state_cmp_full;
    sc_signal< sc_lv<4> > inStream_V_keep_V_0_data_out;
    sc_signal< sc_logic > inStream_V_keep_V_0_vld_in;
    sc_signal< sc_logic > inStream_V_keep_V_0_vld_out;
    sc_signal< sc_logic > inStream_V_keep_V_0_ack_in;
    sc_signal< sc_logic > inStream_V_keep_V_0_ack_out;
    sc_signal< sc_lv<4> > inStream_V_keep_V_0_payload_A;
    sc_signal< sc_lv<4> > inStream_V_keep_V_0_payload_B;
    sc_signal< sc_logic > inStream_V_keep_V_0_sel_rd;
    sc_signal< sc_logic > inStream_V_keep_V_0_sel_wr;
    sc_signal< sc_logic > inStream_V_keep_V_0_sel;
    sc_signal< sc_logic > inStream_V_keep_V_0_load_A;
    sc_signal< sc_logic > inStream_V_keep_V_0_load_B;
    sc_signal< sc_lv<2> > inStream_V_keep_V_0_state;
    sc_signal< sc_logic > inStream_V_keep_V_0_state_cmp_full;
    sc_signal< sc_lv<4> > inStream_V_strb_V_0_data_out;
    sc_signal< sc_logic > inStream_V_strb_V_0_vld_in;
    sc_signal< sc_logic > inStream_V_strb_V_0_vld_out;
    sc_signal< sc_logic > inStream_V_strb_V_0_ack_in;
    sc_signal< sc_logic > inStream_V_strb_V_0_ack_out;
    sc_signal< sc_lv<4> > inStream_V_strb_V_0_payload_A;
    sc_signal< sc_lv<4> > inStream_V_strb_V_0_payload_B;
    sc_signal< sc_logic > inStream_V_strb_V_0_sel_rd;
    sc_signal< sc_logic > inStream_V_strb_V_0_sel_wr;
    sc_signal< sc_logic > inStream_V_strb_V_0_sel;
    sc_signal< sc_logic > inStream_V_strb_V_0_load_A;
    sc_signal< sc_logic > inStream_V_strb_V_0_load_B;
    sc_signal< sc_lv<2> > inStream_V_strb_V_0_state;
    sc_signal< sc_logic > inStream_V_strb_V_0_state_cmp_full;
    sc_signal< sc_lv<2> > inStream_V_user_V_0_data_out;
    sc_signal< sc_logic > inStream_V_user_V_0_vld_in;
    sc_signal< sc_logic > inStream_V_user_V_0_vld_out;
    sc_signal< sc_logic > inStream_V_user_V_0_ack_in;
    sc_signal< sc_logic > inStream_V_user_V_0_ack_out;
    sc_signal< sc_lv<2> > inStream_V_user_V_0_payload_A;
    sc_signal< sc_lv<2> > inStream_V_user_V_0_payload_B;
    sc_signal< sc_logic > inStream_V_user_V_0_sel_rd;
    sc_signal< sc_logic > inStream_V_user_V_0_sel_wr;
    sc_signal< sc_logic > inStream_V_user_V_0_sel;
    sc_signal< sc_logic > inStream_V_user_V_0_load_A;
    sc_signal< sc_logic > inStream_V_user_V_0_load_B;
    sc_signal< sc_lv<2> > inStream_V_user_V_0_state;
    sc_signal< sc_logic > inStream_V_user_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > inStream_V_last_V_0_data_out;
    sc_signal< sc_logic > inStream_V_last_V_0_vld_in;
    sc_signal< sc_logic > inStream_V_last_V_0_vld_out;
    sc_signal< sc_logic > inStream_V_last_V_0_ack_in;
    sc_signal< sc_logic > inStream_V_last_V_0_ack_out;
    sc_signal< sc_lv<1> > inStream_V_last_V_0_payload_A;
    sc_signal< sc_lv<1> > inStream_V_last_V_0_payload_B;
    sc_signal< sc_logic > inStream_V_last_V_0_sel_rd;
    sc_signal< sc_logic > inStream_V_last_V_0_sel_wr;
    sc_signal< sc_logic > inStream_V_last_V_0_sel;
    sc_signal< sc_logic > inStream_V_last_V_0_load_A;
    sc_signal< sc_logic > inStream_V_last_V_0_load_B;
    sc_signal< sc_lv<2> > inStream_V_last_V_0_state;
    sc_signal< sc_logic > inStream_V_last_V_0_state_cmp_full;
    sc_signal< sc_lv<5> > inStream_V_id_V_0_data_out;
    sc_signal< sc_logic > inStream_V_id_V_0_vld_in;
    sc_signal< sc_logic > inStream_V_id_V_0_vld_out;
    sc_signal< sc_logic > inStream_V_id_V_0_ack_in;
    sc_signal< sc_logic > inStream_V_id_V_0_ack_out;
    sc_signal< sc_lv<5> > inStream_V_id_V_0_payload_A;
    sc_signal< sc_lv<5> > inStream_V_id_V_0_payload_B;
    sc_signal< sc_logic > inStream_V_id_V_0_sel_rd;
    sc_signal< sc_logic > inStream_V_id_V_0_sel_wr;
    sc_signal< sc_logic > inStream_V_id_V_0_sel;
    sc_signal< sc_logic > inStream_V_id_V_0_load_A;
    sc_signal< sc_logic > inStream_V_id_V_0_load_B;
    sc_signal< sc_lv<2> > inStream_V_id_V_0_state;
    sc_signal< sc_logic > inStream_V_id_V_0_state_cmp_full;
    sc_signal< sc_lv<6> > inStream_V_dest_V_0_data_out;
    sc_signal< sc_logic > inStream_V_dest_V_0_vld_in;
    sc_signal< sc_logic > inStream_V_dest_V_0_vld_out;
    sc_signal< sc_logic > inStream_V_dest_V_0_ack_in;
    sc_signal< sc_logic > inStream_V_dest_V_0_ack_out;
    sc_signal< sc_lv<6> > inStream_V_dest_V_0_payload_A;
    sc_signal< sc_lv<6> > inStream_V_dest_V_0_payload_B;
    sc_signal< sc_logic > inStream_V_dest_V_0_sel_rd;
    sc_signal< sc_logic > inStream_V_dest_V_0_sel_wr;
    sc_signal< sc_logic > inStream_V_dest_V_0_sel;
    sc_signal< sc_logic > inStream_V_dest_V_0_load_A;
    sc_signal< sc_logic > inStream_V_dest_V_0_load_B;
    sc_signal< sc_lv<2> > inStream_V_dest_V_0_state;
    sc_signal< sc_logic > inStream_V_dest_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > outStream_V_data_V_1_data_out;
    sc_signal< sc_logic > outStream_V_data_V_1_vld_in;
    sc_signal< sc_logic > outStream_V_data_V_1_vld_out;
    sc_signal< sc_logic > outStream_V_data_V_1_ack_in;
    sc_signal< sc_logic > outStream_V_data_V_1_ack_out;
    sc_signal< sc_lv<32> > outStream_V_data_V_1_payload_A;
    sc_signal< sc_lv<32> > outStream_V_data_V_1_payload_B;
    sc_signal< sc_logic > outStream_V_data_V_1_sel_rd;
    sc_signal< sc_logic > outStream_V_data_V_1_sel_wr;
    sc_signal< sc_logic > outStream_V_data_V_1_sel;
    sc_signal< sc_logic > outStream_V_data_V_1_load_A;
    sc_signal< sc_logic > outStream_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_V_data_V_1_state;
    sc_signal< sc_logic > outStream_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > outStream_V_keep_V_1_data_out;
    sc_signal< sc_logic > outStream_V_keep_V_1_vld_in;
    sc_signal< sc_logic > outStream_V_keep_V_1_vld_out;
    sc_signal< sc_logic > outStream_V_keep_V_1_ack_in;
    sc_signal< sc_logic > outStream_V_keep_V_1_ack_out;
    sc_signal< sc_lv<4> > outStream_V_keep_V_1_payload_A;
    sc_signal< sc_lv<4> > outStream_V_keep_V_1_payload_B;
    sc_signal< sc_logic > outStream_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > outStream_V_keep_V_1_sel_wr;
    sc_signal< sc_logic > outStream_V_keep_V_1_sel;
    sc_signal< sc_logic > outStream_V_keep_V_1_load_A;
    sc_signal< sc_logic > outStream_V_keep_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_V_keep_V_1_state;
    sc_signal< sc_logic > outStream_V_keep_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > outStream_V_strb_V_1_data_out;
    sc_signal< sc_logic > outStream_V_strb_V_1_vld_in;
    sc_signal< sc_logic > outStream_V_strb_V_1_vld_out;
    sc_signal< sc_logic > outStream_V_strb_V_1_ack_in;
    sc_signal< sc_logic > outStream_V_strb_V_1_ack_out;
    sc_signal< sc_lv<4> > outStream_V_strb_V_1_payload_A;
    sc_signal< sc_lv<4> > outStream_V_strb_V_1_payload_B;
    sc_signal< sc_logic > outStream_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > outStream_V_strb_V_1_sel_wr;
    sc_signal< sc_logic > outStream_V_strb_V_1_sel;
    sc_signal< sc_logic > outStream_V_strb_V_1_load_A;
    sc_signal< sc_logic > outStream_V_strb_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_V_strb_V_1_state;
    sc_signal< sc_logic > outStream_V_strb_V_1_state_cmp_full;
    sc_signal< sc_lv<2> > outStream_V_user_V_1_data_out;
    sc_signal< sc_logic > outStream_V_user_V_1_vld_in;
    sc_signal< sc_logic > outStream_V_user_V_1_vld_out;
    sc_signal< sc_logic > outStream_V_user_V_1_ack_in;
    sc_signal< sc_logic > outStream_V_user_V_1_ack_out;
    sc_signal< sc_lv<2> > outStream_V_user_V_1_payload_A;
    sc_signal< sc_lv<2> > outStream_V_user_V_1_payload_B;
    sc_signal< sc_logic > outStream_V_user_V_1_sel_rd;
    sc_signal< sc_logic > outStream_V_user_V_1_sel_wr;
    sc_signal< sc_logic > outStream_V_user_V_1_sel;
    sc_signal< sc_logic > outStream_V_user_V_1_load_A;
    sc_signal< sc_logic > outStream_V_user_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_V_user_V_1_state;
    sc_signal< sc_logic > outStream_V_user_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > outStream_V_last_V_1_data_out;
    sc_signal< sc_logic > outStream_V_last_V_1_vld_in;
    sc_signal< sc_logic > outStream_V_last_V_1_vld_out;
    sc_signal< sc_logic > outStream_V_last_V_1_ack_in;
    sc_signal< sc_logic > outStream_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > outStream_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > outStream_V_last_V_1_payload_B;
    sc_signal< sc_logic > outStream_V_last_V_1_sel_rd;
    sc_signal< sc_logic > outStream_V_last_V_1_sel_wr;
    sc_signal< sc_logic > outStream_V_last_V_1_sel;
    sc_signal< sc_logic > outStream_V_last_V_1_load_A;
    sc_signal< sc_logic > outStream_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_V_last_V_1_state;
    sc_signal< sc_logic > outStream_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<5> > outStream_V_id_V_1_data_out;
    sc_signal< sc_logic > outStream_V_id_V_1_vld_in;
    sc_signal< sc_logic > outStream_V_id_V_1_vld_out;
    sc_signal< sc_logic > outStream_V_id_V_1_ack_in;
    sc_signal< sc_logic > outStream_V_id_V_1_ack_out;
    sc_signal< sc_lv<5> > outStream_V_id_V_1_payload_A;
    sc_signal< sc_lv<5> > outStream_V_id_V_1_payload_B;
    sc_signal< sc_logic > outStream_V_id_V_1_sel_rd;
    sc_signal< sc_logic > outStream_V_id_V_1_sel_wr;
    sc_signal< sc_logic > outStream_V_id_V_1_sel;
    sc_signal< sc_logic > outStream_V_id_V_1_load_A;
    sc_signal< sc_logic > outStream_V_id_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_V_id_V_1_state;
    sc_signal< sc_logic > outStream_V_id_V_1_state_cmp_full;
    sc_signal< sc_lv<6> > outStream_V_dest_V_1_data_out;
    sc_signal< sc_logic > outStream_V_dest_V_1_vld_in;
    sc_signal< sc_logic > outStream_V_dest_V_1_vld_out;
    sc_signal< sc_logic > outStream_V_dest_V_1_ack_in;
    sc_signal< sc_logic > outStream_V_dest_V_1_ack_out;
    sc_signal< sc_lv<6> > outStream_V_dest_V_1_payload_A;
    sc_signal< sc_lv<6> > outStream_V_dest_V_1_payload_B;
    sc_signal< sc_logic > outStream_V_dest_V_1_sel_rd;
    sc_signal< sc_logic > outStream_V_dest_V_1_sel_wr;
    sc_signal< sc_logic > outStream_V_dest_V_1_sel;
    sc_signal< sc_logic > outStream_V_dest_V_1_load_A;
    sc_signal< sc_logic > outStream_V_dest_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_V_dest_V_1_state;
    sc_signal< sc_logic > outStream_V_dest_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > gain;
    sc_signal< sc_logic > inStream_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_fu_138_p2;
    sc_signal< sc_logic > outStream_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > exitcond_reg_188;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > exitcond_reg_188_pp0_iter1_reg;
    sc_signal< sc_lv<10> > idx_reg_127;
    sc_signal< sc_lv<32> > gain_read_reg_183;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > idx_1_fu_144_p2;
    sc_signal< sc_lv<4> > tmp_keep_V_reg_197;
    sc_signal< sc_lv<4> > tmp_strb_V_reg_202;
    sc_signal< sc_lv<2> > tmp_user_V_reg_207;
    sc_signal< sc_lv<1> > tmp_last_V_reg_212;
    sc_signal< sc_lv<5> > tmp_id_V_reg_217;
    sc_signal< sc_lv<6> > tmp_dest_V_reg_222;
    sc_signal< sc_lv<32> > valOut_data_V_fu_178_p2;
    sc_signal< sc_lv<32> > valOut_data_V_reg_227;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > valOut_data_V_fu_178_p0;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_3E8;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_exitcond_fu_138_p2();
    void thread_idx_1_fu_144_p2();
    void thread_inStream_TDATA_blk_n();
    void thread_inStream_TREADY();
    void thread_inStream_V_data_V_0_ack_in();
    void thread_inStream_V_data_V_0_ack_out();
    void thread_inStream_V_data_V_0_data_out();
    void thread_inStream_V_data_V_0_load_A();
    void thread_inStream_V_data_V_0_load_B();
    void thread_inStream_V_data_V_0_sel();
    void thread_inStream_V_data_V_0_state_cmp_full();
    void thread_inStream_V_data_V_0_vld_in();
    void thread_inStream_V_data_V_0_vld_out();
    void thread_inStream_V_dest_V_0_ack_in();
    void thread_inStream_V_dest_V_0_ack_out();
    void thread_inStream_V_dest_V_0_data_out();
    void thread_inStream_V_dest_V_0_load_A();
    void thread_inStream_V_dest_V_0_load_B();
    void thread_inStream_V_dest_V_0_sel();
    void thread_inStream_V_dest_V_0_state_cmp_full();
    void thread_inStream_V_dest_V_0_vld_in();
    void thread_inStream_V_dest_V_0_vld_out();
    void thread_inStream_V_id_V_0_ack_in();
    void thread_inStream_V_id_V_0_ack_out();
    void thread_inStream_V_id_V_0_data_out();
    void thread_inStream_V_id_V_0_load_A();
    void thread_inStream_V_id_V_0_load_B();
    void thread_inStream_V_id_V_0_sel();
    void thread_inStream_V_id_V_0_state_cmp_full();
    void thread_inStream_V_id_V_0_vld_in();
    void thread_inStream_V_id_V_0_vld_out();
    void thread_inStream_V_keep_V_0_ack_in();
    void thread_inStream_V_keep_V_0_ack_out();
    void thread_inStream_V_keep_V_0_data_out();
    void thread_inStream_V_keep_V_0_load_A();
    void thread_inStream_V_keep_V_0_load_B();
    void thread_inStream_V_keep_V_0_sel();
    void thread_inStream_V_keep_V_0_state_cmp_full();
    void thread_inStream_V_keep_V_0_vld_in();
    void thread_inStream_V_keep_V_0_vld_out();
    void thread_inStream_V_last_V_0_ack_in();
    void thread_inStream_V_last_V_0_ack_out();
    void thread_inStream_V_last_V_0_data_out();
    void thread_inStream_V_last_V_0_load_A();
    void thread_inStream_V_last_V_0_load_B();
    void thread_inStream_V_last_V_0_sel();
    void thread_inStream_V_last_V_0_state_cmp_full();
    void thread_inStream_V_last_V_0_vld_in();
    void thread_inStream_V_last_V_0_vld_out();
    void thread_inStream_V_strb_V_0_ack_in();
    void thread_inStream_V_strb_V_0_ack_out();
    void thread_inStream_V_strb_V_0_data_out();
    void thread_inStream_V_strb_V_0_load_A();
    void thread_inStream_V_strb_V_0_load_B();
    void thread_inStream_V_strb_V_0_sel();
    void thread_inStream_V_strb_V_0_state_cmp_full();
    void thread_inStream_V_strb_V_0_vld_in();
    void thread_inStream_V_strb_V_0_vld_out();
    void thread_inStream_V_user_V_0_ack_in();
    void thread_inStream_V_user_V_0_ack_out();
    void thread_inStream_V_user_V_0_data_out();
    void thread_inStream_V_user_V_0_load_A();
    void thread_inStream_V_user_V_0_load_B();
    void thread_inStream_V_user_V_0_sel();
    void thread_inStream_V_user_V_0_state_cmp_full();
    void thread_inStream_V_user_V_0_vld_in();
    void thread_inStream_V_user_V_0_vld_out();
    void thread_outStream_TDATA();
    void thread_outStream_TDATA_blk_n();
    void thread_outStream_TDEST();
    void thread_outStream_TID();
    void thread_outStream_TKEEP();
    void thread_outStream_TLAST();
    void thread_outStream_TSTRB();
    void thread_outStream_TUSER();
    void thread_outStream_TVALID();
    void thread_outStream_V_data_V_1_ack_in();
    void thread_outStream_V_data_V_1_ack_out();
    void thread_outStream_V_data_V_1_data_out();
    void thread_outStream_V_data_V_1_load_A();
    void thread_outStream_V_data_V_1_load_B();
    void thread_outStream_V_data_V_1_sel();
    void thread_outStream_V_data_V_1_state_cmp_full();
    void thread_outStream_V_data_V_1_vld_in();
    void thread_outStream_V_data_V_1_vld_out();
    void thread_outStream_V_dest_V_1_ack_in();
    void thread_outStream_V_dest_V_1_ack_out();
    void thread_outStream_V_dest_V_1_data_out();
    void thread_outStream_V_dest_V_1_load_A();
    void thread_outStream_V_dest_V_1_load_B();
    void thread_outStream_V_dest_V_1_sel();
    void thread_outStream_V_dest_V_1_state_cmp_full();
    void thread_outStream_V_dest_V_1_vld_in();
    void thread_outStream_V_dest_V_1_vld_out();
    void thread_outStream_V_id_V_1_ack_in();
    void thread_outStream_V_id_V_1_ack_out();
    void thread_outStream_V_id_V_1_data_out();
    void thread_outStream_V_id_V_1_load_A();
    void thread_outStream_V_id_V_1_load_B();
    void thread_outStream_V_id_V_1_sel();
    void thread_outStream_V_id_V_1_state_cmp_full();
    void thread_outStream_V_id_V_1_vld_in();
    void thread_outStream_V_id_V_1_vld_out();
    void thread_outStream_V_keep_V_1_ack_in();
    void thread_outStream_V_keep_V_1_ack_out();
    void thread_outStream_V_keep_V_1_data_out();
    void thread_outStream_V_keep_V_1_load_A();
    void thread_outStream_V_keep_V_1_load_B();
    void thread_outStream_V_keep_V_1_sel();
    void thread_outStream_V_keep_V_1_state_cmp_full();
    void thread_outStream_V_keep_V_1_vld_in();
    void thread_outStream_V_keep_V_1_vld_out();
    void thread_outStream_V_last_V_1_ack_in();
    void thread_outStream_V_last_V_1_ack_out();
    void thread_outStream_V_last_V_1_data_out();
    void thread_outStream_V_last_V_1_load_A();
    void thread_outStream_V_last_V_1_load_B();
    void thread_outStream_V_last_V_1_sel();
    void thread_outStream_V_last_V_1_state_cmp_full();
    void thread_outStream_V_last_V_1_vld_in();
    void thread_outStream_V_last_V_1_vld_out();
    void thread_outStream_V_strb_V_1_ack_in();
    void thread_outStream_V_strb_V_1_ack_out();
    void thread_outStream_V_strb_V_1_data_out();
    void thread_outStream_V_strb_V_1_load_A();
    void thread_outStream_V_strb_V_1_load_B();
    void thread_outStream_V_strb_V_1_sel();
    void thread_outStream_V_strb_V_1_state_cmp_full();
    void thread_outStream_V_strb_V_1_vld_in();
    void thread_outStream_V_strb_V_1_vld_out();
    void thread_outStream_V_user_V_1_ack_in();
    void thread_outStream_V_user_V_1_ack_out();
    void thread_outStream_V_user_V_1_data_out();
    void thread_outStream_V_user_V_1_load_A();
    void thread_outStream_V_user_V_1_load_B();
    void thread_outStream_V_user_V_1_sel();
    void thread_outStream_V_user_V_1_state_cmp_full();
    void thread_outStream_V_user_V_1_vld_in();
    void thread_outStream_V_user_V_1_vld_out();
    void thread_valOut_data_V_fu_178_p0();
    void thread_valOut_data_V_fu_178_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
